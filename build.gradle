buildscript {
    ext {
        springBootVersion = "2.6.6"
    }

    repositories {
        maven {
            url skyReleasesMirror
        }
        maven {
            url centralMirror
        }
        maven {
            url gradlePluginsMirror
        }
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath "com.sky.cirrus.core.gradle:k8-plugin:36.+"
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.+'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins{
    id 'org.springframework.boot' version "${springBootVersion}"
}

apply plugin: 'java'
apply plugin: 'application' // Required for running the jar as a main program
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'k8plugin'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'

    implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"

    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

k8plugin {
    team = 'vidar'
    registry = 'registry.tools.cosmic.sky'
    mirror = 'mirror.registry:5000' //service url for mirror Repo
    serviceName = 'sas-replay-events'
//    podYaml = "./pod.yml"   Not mandatory when using default place to put

    // The tool to use for building and pushing Docker images.
    imageBuilder = ''

    servicePorts {
        http {
            targetPort = 8888
            port = 8888
        }
    }

    deployments {
        local {
            //   namespace = "vidar-local"
            namespace = "default"
            repository = "test"
            kubectlContext = "docker-desktop"
//            kubectlContext = "dev.cosmic.sky"
            replicas = 3
            deploymentStrategy = 'Recreate'
//               kubectlContext = 'dev.ce.eu-central-1-aws.npottdc.sky'
            addPodPlaceholder "resources", "resources: { limits: { cpu: 0, memory: 1.2Gi }, requests: { cpu: 0, memory: 1.2Gi } }"
            addPodPlaceholder "image", "local/sas-replay-events"
            addPodPlaceholder "min_heap_size", "768M"
            addPodPlaceholder "max_heap_size", "768M"
            ingresses {
                http {
                    host = 'sas-replay-events.docker-desktop'
                    path = '/'
                    port = 'http'
                    scheme = 'INTERNAL'
                    ingressClassName = 'main'
                }
            }
        }
            integration {
                namespace = "sas-kafka-scheduler-int"
                repository = "test"
                kubectlContext = "dev.ce.eu-central-1-aws.npottdc.sky"
                replicas = 1
                deploymentStrategy = "Recreate"
                deploymentMaxUnavailable = 1
                deploymentMaxSurge = 0
                addPodPlaceholder "resources", "resources: { limits: { cpu: 0, memory: 1.2Gi }, requests: { cpu: 0, memory: 1.2Gi } }"
//                addPodPlaceholder "image", "local/sas-replay-events"
//                addPodPlaceholder "profile", "int"
                addPodPlaceholder "min_heap_size", "1536M"
                addPodPlaceholder "max_heap_size", "1536M"
                ingresses {
                    http {
                        host = 'sas-replay-events.dev.ce.eu-central-1-aws.npottdc.sky'
                        path = '/'
                        port = 'http'
                        scheme = 'INTERNAL'  //TODO find what happens w/o this
                        ingressClassName = 'main'
                    }
                }
            }
        }
    }


group 'com.sky'
version '1.3-SNAPSHOT'
jar.archiveName "sas-replay-events.jar"

// Properties for the 'application' plugin to set the entry point in the manifest
mainClassName = 'com.sky.sas.events.replay.ReplayEventsApp'

// Shadow plugin config for the fat jar
shadowJar {
    archiveClassifier.set('') // Remove the 'all' classifier
    archiveVersion.set('') // Prevent the project.version being added

    // This is required for dropwizard-logging-encoders
    shadowJar {
        mergeServiceFiles()
    }
}

//runShadow {
//    // Dropwizard arguments
//    args 'server', 'reference.yml'
//}


/*jar {
    manifest {
        attributes(
                'Main-Class': 'com.sky.sas.events.replay.ReplayEventsApp',
                'Implementation-Title': 'SAS Replay Events Restful App',
                'Implementation-Version': project.version,
                'Built-By': 'Vidar Team',
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version')
        )
    }
    enabled = true
}*/
test {
    useJUnitPlatform()
}

//TODO these may stop extra jars creation
bootDistTar.enabled = false
bootDistZip.enabled = false
distTar.enabled = false
distZip.enabled = false

// Ensure the jar is built when building the Docker image
buildImageDependencies.dependsOn shadowJar
//buildImageDependencies.mustRunAfter 'build'
task cdBuild(dependsOn: ['clean', 'build' ])
task cdRelease(dependsOn: ['buildImage','pushImageToTest'])
